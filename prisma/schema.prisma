// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x","debian-openssl-3.0.x"]
  previewFeatures = ["interactiveTransactions"]
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum ClassType {
  SECONDARY
  JAMB
}

enum ExamStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  GRADED
}

enum ExamResultStatus {
  PENDING
  COMPLETED
}

model User {
  id          String          @id @default(uuid())
  name        String
  email       String          @unique
  password    String
  role        Role
  isActive    Boolean         @default(true)
  lastLogin   DateTime?

  studentProfile StudentProfile?
  teacherProfile TeacherProfile?

  // audit relations: which user created certain records
  createdExams     Exam[]       @relation("ExamCreatedBy")
  createdQuestions Question[]   @relation("QuestionCreatedBy")

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("users")
}

model StudentProfile {
  id              String   @id @default(uuid())
  regNo           String   @unique @map("student_registration_number")
  classId         String
  class           Class    @relation(fields: [classId], references: [id])
  userId          String   @unique @map("user_id")
  user            User     @relation(fields: [userId], references: [id])

  subjects        Subject[] @relation("StudentSubjects")
  results         ExamResult[]
  answers         StudentAnswer[]
  examAssignments ExamAssignment[]

  isDeleted       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

  @@map("student_profile")
  @@index([classId])
}

model TeacherProfile {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  subjects  Subject[] @relation("TeacherSubjects")
  classes   Class[]   @relation("TeacherClasses")

  // OPPOSITE relation fields added:
  exams     Exam[]     // teacher → exams they own (fast lookup)
  questions Question[] // teacher → authored questions

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@map("teacher_profile")
}

model Class {
  id        String   @id @default(uuid())
  name      String
  classType ClassType

  students  StudentProfile[]
  subjects  Subject[]
  exams     Exam[]
  teachers  TeacherProfile[] @relation("TeacherClasses")

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@unique([name, classType])
  @@map("classes")
}

model Subject {
  id          String   @id @default(uuid())
  name        String
  code        String?  @unique
  description String?

  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])

  // ownership: subject can have multiple teachers (co-teaching), and teachers can teach many subjects
  teachers    TeacherProfile[] @relation("TeacherSubjects")
  students    StudentProfile[] @relation("StudentSubjects")

  // canonical exams for this subject
  exams       Exam[]

  // OPPOSITE relation field added:
  questions   Question[]       // all questions in the question bank for this subject

  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?

  @@unique([name, classId])
  @@map("subjects")
  @@index([classId])
}

model Exam {
  id             String       @id @default(uuid())
  title          String
  description    String?

  // scheduling & control
  date           DateTime?   // nominal scheduled date
  startTime      DateTime?
  endTime        DateTime?
  duration       Int?        // minutes
  questionCount  Int?
  isPublished    Boolean     @default(false)
  isRandomized   Boolean     @default(false)

  subjectId      String
  subject        Subject     @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  classId        String?
  class          Class?      @relation(fields: [classId], references: [id], onDelete: SetNull)

  createdById    String?
  createdBy      User?       @relation("ExamCreatedBy", fields: [createdById], references: [id])

  teacherId      String?
  teacher        TeacherProfile? @relation(fields: [teacherId], references: [id], onDelete: SetNull)

  // children — DO NOT place onDelete on this side. Child side (Question) owns the referential action.
  questions      Question[]
  studentAnswers StudentAnswer[]
  results        ExamResult[]
  assignments    ExamAssignment[]

  status         ExamStatus   @default(DRAFT)

  // soft delete & audit
  isDeleted      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  @@map("exams")
  @@index([subjectId])
  @@index([classId])
  @@index([teacherId])
}

model Option {
  id         String   @id @default(uuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  label      String   // e.g. "A", "B"
  text       String
  isCorrect  Boolean  @default(false)
  weight     Float?   // for partial credit
  meta       Json?    // any media or additional metadata

  // OPPOSITE relation field added:
  studentAnswers StudentAnswer[] // answers that selected this option (optional)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
  @@map("options")
}

model Question {
  id             String   @id @default(uuid())
  text           String

  options        Option[]

  examId         String?
  // child side holds the referential action for deletion of questions when exam deleted
  exam           Exam?    @relation(fields: [examId], references: [id], onDelete: Cascade)

  subjectId      String?
  subject        Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)

  teacherId      String?
  teacher        TeacherProfile? @relation(fields: [teacherId], references: [id], onDelete: SetNull)

  createdById    String?
  createdBy      User?    @relation("QuestionCreatedBy", fields: [createdById], references: [id])

  answers        StudentAnswer[]

  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  @@map("questions")
  @@index([examId])
  @@index([subjectId])
}

model ExamAssignment {
  id             String   @id @default(uuid())
  examId         String
  exam           Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  studentId      String
  student        StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  availableFrom  DateTime?
  availableTo    DateTime?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([examId, studentId])
  @@map("exam_assignments")
}

model ExamResult {
  id             String   @id @default(uuid())
  studentId      String
  examId         String
  attempt        Int      @default(1)

  score          Float?
  correctCount   Int?
  totalQuestions Int?
  percent        Float?
  grade          String?
  status         ExamResultStatus @default(PENDING)

  startedAt      DateTime?
  submittedAt    DateTime?
  durationTaken  Int?     // seconds

  student        StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  exam           Exam           @relation(fields: [examId], references: [id], onDelete: Cascade)

  answeredCount  Int?      @default(0)

  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@unique([studentId, examId, attempt])
  @@map("exam_results")
  @@index([examId])
  @@index([studentId])
}

model StudentAnswer {
  id             String   @id @default(uuid())
  studentId      String
  questionId     String
  examId         String

  optionId       String?  // reference to Option chosen (preferred to string for referential integrity)
  selectedText   String?  // fallback if option was free text or option model not used
  isCorrect      Boolean?
  savedAt        DateTime @default(now())
  submittedAt    DateTime?

  student        StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  question       Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  exam           Exam           @relation(fields: [examId], references: [id], onDelete: Cascade)
  option         Option?        @relation(fields: [optionId], references: [id], onDelete: SetNull)

  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  deletedAt      DateTime?

  @@unique([studentId, questionId, examId])
  @@map("student_answers")
  @@index([examId])
  @@index([studentId])
  @@index([questionId])
}